"""Test configuration and fixtures."""

import pandas as pd
import pytest
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

# Define constants locally to avoid import issues
CATEGORICAL_COLS = ["Sex"]
NUMERIC_COLS = [
    "Length",
    "Diameter",
    "Height",
    "Whole weight",
    "Shucked weight",
    "Viscera weight",
    "Shell weight",
]
TARGET = "Age"


@pytest.fixture
def sample_dataframe():
    """Sample dataframe for testing."""
    return pd.DataFrame(
        {
            "Sex": [
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
            ],
            "Length": [
                0.5,
                0.6,
                0.4,
                0.55,
                0.52,
                0.48,
                0.58,
                0.45,
                0.62,
                0.47,
                0.59,
                0.43,
                0.56,
                0.49,
                0.61,
                0.44,
            ],
            "Diameter": [
                0.4,
                0.45,
                0.35,
                0.42,
                0.38,
                0.33,
                0.46,
                0.36,
                0.48,
                0.37,
                0.47,
                0.34,
                0.45,
                0.39,
                0.49,
                0.35,
            ],
            "Height": [
                0.1,
                0.15,
                0.08,
                0.12,
                0.11,
                0.09,
                0.14,
                0.10,
                0.16,
                0.09,
                0.15,
                0.08,
                0.13,
                0.12,
                0.17,
                0.07,
            ],
            "Whole weight": [
                0.2,
                0.25,
                0.15,
                0.22,
                0.21,
                0.18,
                0.24,
                0.19,
                0.26,
                0.20,
                0.25,
                0.17,
                0.23,
                0.22,
                0.27,
                0.16,
            ],
            "Shucked weight": [
                0.1,
                0.12,
                0.09,
                0.11,
                0.10,
                0.08,
                0.13,
                0.09,
                0.14,
                0.08,
                0.13,
                0.07,
                0.12,
                0.11,
                0.15,
                0.06,
            ],
            "Viscera weight": [
                0.05,
                0.06,
                0.04,
                0.05,
                0.04,
                0.03,
                0.07,
                0.04,
                0.08,
                0.03,
                0.07,
                0.02,
                0.06,
                0.05,
                0.09,
                0.01,
            ],
            "Shell weight": [
                0.07,
                0.08,
                0.05,
                0.07,
                0.06,
                0.04,
                0.09,
                0.05,
                0.10,
                0.04,
                0.09,
                0.03,
                0.08,
                0.07,
                0.11,
                0.02,
            ],
            "Age": [
                6.5,
                11.5,
                4.5,
                7.5,
                6.8,
                5.2,
                8.1,
                5.9,
                9.3,
                5.6,
                8.7,
                4.8,
                7.2,
                6.3,
                9.8,
                4.2,
            ],
        }
    )


@pytest.fixture
def sample_dataframe_with_rings():
    """Sample dataframe with Rings column for testing."""
    return pd.DataFrame(
        {
            "Rings": [5, 10, 3, 6, 9, 4, 7, 8, 5, 6, 9, 4, 7, 8, 5, 6],
            "Sex": [
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
                "F",
                "I",
                "M",
            ],
            "Length": [
                0.5,
                0.6,
                0.4,
                0.55,
                0.52,
                0.48,
                0.58,
                0.45,
                0.62,
                0.47,
                0.59,
                0.43,
                0.56,
                0.49,
                0.61,
                0.44,
            ],
            "Diameter": [
                0.4,
                0.45,
                0.35,
                0.42,
                0.38,
                0.33,
                0.46,
                0.36,
                0.48,
                0.37,
                0.47,
                0.34,
                0.45,
                0.39,
                0.49,
                0.35,
            ],
            "Height": [
                0.1,
                0.15,
                0.08,
                0.12,
                0.11,
                0.09,
                0.14,
                0.10,
                0.16,
                0.09,
                0.15,
                0.08,
                0.13,
                0.12,
                0.17,
                0.07,
            ],
            "Whole weight": [
                0.2,
                0.25,
                0.15,
                0.22,
                0.21,
                0.18,
                0.24,
                0.19,
                0.26,
                0.20,
                0.25,
                0.17,
                0.23,
                0.22,
                0.27,
                0.16,
            ],
            "Shucked weight": [
                0.1,
                0.12,
                0.09,
                0.11,
                0.10,
                0.08,
                0.13,
                0.09,
                0.14,
                0.08,
                0.13,
                0.07,
                0.12,
                0.11,
                0.15,
                0.06,
            ],
            "Viscera weight": [
                0.05,
                0.06,
                0.04,
                0.05,
                0.04,
                0.03,
                0.07,
                0.04,
                0.08,
                0.03,
                0.07,
                0.02,
                0.06,
                0.05,
                0.09,
                0.01,
            ],
            "Shell weight": [
                0.07,
                0.08,
                0.05,
                0.07,
                0.06,
                0.04,
                0.09,
                0.05,
                0.10,
                0.04,
                0.09,
                0.03,
                0.08,
                0.07,
                0.11,
                0.02,
            ],
        }
    )


@pytest.fixture
def mock_preprocessor():
    """Mock preprocessor for testing."""
    return ColumnTransformer(
        [("cat", OneHotEncoder(handle_unknown="ignore"), CATEGORICAL_COLS)],
        remainder="passthrough",
    )


@pytest.fixture
def mock_model():
    """Mock model for testing."""
    from unittest.mock import MagicMock

    mock = MagicMock()
    mock.fit.return_value = mock
    mock.predict.return_value = [1.0, 2.0, 3.0]
    return mock
